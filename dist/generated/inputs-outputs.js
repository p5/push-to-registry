"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Outputs = exports.Inputs = void 0;
// This file was auto-generated by action-io-generator. Do not edit by hand!
var Inputs;
(function (Inputs) {
    /**
     * The compression formats to use when pushing the image.
     * Separate formats by whitespace. For example, "gzip zstd zstd:chunked".
     * Required: false
     * Default: "gzip"
     */
    Inputs["COMPRESSION_FORMATS"] = "compression-formats";
    /**
     * After copying the image, write the digest of the resulting image to the file.
     * By default, the filename will be determined from the image and tag.
     * The contents of this file are the digest output.
     * Required: false
     * Default: None.
     */
    Inputs["DIGESTFILE"] = "digestfile";
    /**
     * Extra args to be passed to podman push.
     * Separate arguments by newline. Do not use quotes - @actions/exec will do the quoting for you.
     * Required: false
     * Default: None.
     */
    Inputs["EXTRA_ARGS"] = "extra-args";
    /**
     * Name of the image/manifest to push (e.g. username/imagename or imagename)
     * Required: false
     * Default: None.
     */
    Inputs["IMAGE"] = "image";
    /**
     * Password to use as credential to authenticate to the registry
     * Required: false
     * Default: None.
     */
    Inputs["PASSWORD"] = "password";
    /**
     * Hostname and optional namespace to push the image to (eg. quay.io/username or quay.io)
     * Required: false
     * Default: None.
     */
    Inputs["REGISTRY"] = "registry";
    /**
     * 'The tag or tags of the image/manifest to push.
     * For multiple tags, separate by whitespace. For example, "latest v1"'
     * Required: false
     * Default: "latest"
     */
    Inputs["TAGS"] = "tags";
    /**
     * Verify TLS certificates when contacting the registry
     * Required: false
     * Default: "true"
     */
    Inputs["TLS_VERIFY"] = "tls-verify";
    /**
     * Username to use as credential to authenticate to the registry
     * Required: false
     * Default: None.
     */
    Inputs["USERNAME"] = "username";
})(Inputs || (exports.Inputs = Inputs = {}));
var Outputs;
(function (Outputs) {
    /**
     * The pushed image/manifest digest, as written to the "digestfile"
     * Required: false
     * Default: None.
     */
    Outputs["DIGEST"] = "digest";
    /**
     * The first element of registry-paths.
     * Required: false
     * Default: None.
     */
    Outputs["REGISTRY_PATH"] = "registry-path";
    /**
     * A JSON array of registry paths to which the tag(s) were pushed
     * Required: false
     * Default: None.
     */
    Outputs["REGISTRY_PATHS"] = "registry-paths";
})(Outputs || (exports.Outputs = Outputs = {}));
//# sourceMappingURL=inputs-outputs.js.map